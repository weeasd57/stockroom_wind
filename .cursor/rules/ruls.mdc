---
description:
globs:
alwaysApply: true
---

üîß Cursor AI Assistant Rules

üó£Ô∏è Communication
- Speak Arabic (Egyptian dialect) when explaining concepts.
- dont write arabic in files project .
- Provide step-by-step explanations with clarity.
- Suggest better system designs and algorithms, not just code fixes.
- Respect the existing codebase structure and coding style.

üí° Code Quality & Design
- Follow React and Next.js best practices.
- Use modern, responsive, clean architecture for frontend and backend.
- Write modular, reusable, and well-structured components.
- Follow SOLID and DRY principles.
- Use modern JavaScript/TypeScript syntax (ES6+).
- Avoid anti-patterns; suggest cleaner alternatives.
- Add appropriate **providers** (e.g., Context, Zustand, Redux) to manage and persist state efficiently.
- Ensure providers are placed logically in the app tree to minimize unnecessary re-renders.

üîê Security & Error Handling
- Apply security best practices (e.g. XSS, CSRF protection, input sanitization).
- Always suggest secure and defensive coding techniques.
- Provide robust and clear error-handling strategies with fallback UIs/messages.

‚ö° Performance Optimization
- Optimize code for runtime performance and scalability.
- Minimize unnecessary re-renders and optimize rendering logic.
- Recommend best caching and data-fetching strategies (ISR, SSG, SSR).
- Use memoization (React.memo, useMemo, useCallback) where appropriate.
- Detect and reduce memory leaks or bottlenecks.
- Suggest performance-optimized state management strategies (e.g., selective re-rendering, atomic stores).

üö® RSC Prefetch & Memory Leak Prevention
- NEVER use Link components for  navigation - causes RSC Prefetch Cascade Error
- Always use programmatic navigation: `router.push()` instead of `<Link href="/view-profile/id">`
- Add `e.preventDefault()` and `e.stopPropagation()` to button onClick handlers
- Watch for Network Console showing `?_rsc=` requests - indicates aggressive prefetching bug
- Replace ALL profile Links with buttons + useRouter for clean client-side navigation
- Monitor for "Request timed out" errors - symptom of RSC cascade conflicts
- Clean up subscriptions, intervals, and event listeners in useEffect cleanup functions
- Use AbortController for fetch requests to prevent memory leaks on component unmount
- Implement global cleanup for Supabase channels and background processes
- Throttle and debounce expensive operations (API calls, re-renders, event handlers)
- Cache frequently accessed data with proper TTL to reduce redundant network requests

üîé Testing & Edge Case Coverage
- Identify edge cases and validate inputs properly.
- Suggest appropriate unit, integration, and E2E testing strategies.
- Recommend tools like Jest, React Testing Library, Playwright, or Cypress.

üö´ Constraints
- Do NOT run or suggest running a local server.
- Avoid installing unnecessary dependencies unless clearly justified.

üß† Clarity & Documentation
- Include comments in code examples to explain logic.
- Suggest better naming conventions and improve code readability.
- Break large logic blocks into small, purposeful functions.
- Ensure that added providers or wrappers are well-documented and easy to maintain.

üìä Performance Monitoring & Debugging
- Monitor Network Console for excessive RSC requests (`?_rsc=` parameters)
- Check for memory growth in DevTools Performance tab during navigation
- Log cleanup operations only in development mode to reduce console spam
- Use performance.mark() and performance.measure() for critical code paths
- Implement error boundaries for graceful degradation during navigation issues
- Track component mount/unmount cycles to detect memory leak patterns
- Monitor Supabase connection pools and active subscription counts
